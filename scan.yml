trigger: none

pool:
  vmImage: ubuntu-latest

jobs:
- job: sonarqube_scan
  steps:
  - checkout: self

  - task: SonarQubePrepare@5
    inputs:
     SonarQube: 'SonarQubeScan'
     scannerMode: 'CLI'
     configMode: 'manual'
     cliprojectKey: 'Test'

# Run Code Analysis task
  - task: SonarQubeAnalyze@5

# Publish Quality Gate Result task
  - task: SonarQubePublish@5
    inputs:
     pollingTimeoutSec: '300' 

- job: tfsec_scan
  dependsOn: sonarqube_scan
  # condition: and(succeeded('sonarqube_scan'), eq(variables['Build.QualityGateStatus'], 'OK'))
  condition: succeeded('sonarqube_scan')
  steps:
  - checkout: self

  - task: UseNode@1
    inputs:
      checkLatest: true

  - script: |
      curl -L -o tfsec https://github.com/tfsec/tfsec/releases/latest/download/tfsec-linux-amd64
      chmod +x tfsec
      sudo mv tfsec /usr/local/bin/
    displayName: 'Install tfsec'

  - script: |
      tfsec . --format json > tfsec_azure_repo_output.json || true
      echo "Terraform code scan completed."
    displayName: 'Run tfsec azure repo scan'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: 'tfsec_azure_repo_output.json'
      artifactName: 'tfsec_azure_repo_output'
    displayName: 'Upload Tfsec azure repo Output as Artifact'

- job: opa_scan
  dependsOn: tfsec_scan
  condition: succeeded('tfsec_scan')
  steps:
  - checkout: self

  - script: |
      # Print value of $(Build.SourcesDirectory)
      echo "Build.SourcesDirectory: $(Build.SourcesDirectory)"

      # Print directory contents
      ls -la $(Build.SourcesDirectory)

      # Pull the OPA Docker image
      docker pull openpolicyagent/opa:latest

      # Run OPA against Terraform code using Docker
      docker run --rm -v $(Build.SourcesDirectory):/data openpolicyagent/opa eval -d /data/OPA_policy.rego 'data.main'

      # Capture the exit code of the OPA evaluation
      OPA_EXIT_CODE=$?

      # Check the exit code and exit accordingly
      if [ $OPA_EXIT_CODE -eq 0 ]; then
        echo "OPA scan passed successfully."
      else
        echo "OPA scan failed with policy violations."
        
      fi
    displayName: 'Run OPA Scan'
